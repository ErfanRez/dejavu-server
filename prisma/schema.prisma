// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  password String
  isAdmin  Boolean @default(false)
  imageUrl String? @default("https://cdn-icons-png.flaticon.com/512/3135/3135715.png")

  favSales LikedSales[] // Relation to LikedSales model
  favRents LikedRents[] // Relation to LikedRents model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Intermediary for a many-to-many relationship
model LikedSales {
  id      String     @id @default(uuid())
  userId  String // Foreign Key to User model
  user    User       @relation(fields: [userId], references: [id])
  saleId  String // Foreign Key to SaleDetail model
  favSale SaleDetail @relation(fields: [saleId], references: [id])

  @@index([userId])
  @@index([saleId])
}

model LikedRents {
  id      String     @id @default(uuid())
  userId  String // Foreign Key to User
  user    User       @relation(fields: [userId], references: [id])
  rentId  String // Foreign Key to RentDetail model
  favRent RentDetail @relation(fields: [rentId], references: [id])

  @@index([userId])
  @@index([rentId])
}

model Property {
  id             String          @id @default(uuid())
  title          String
  developer      String
  city           String
  country        String
  location       String
  category       String
  description    String          @db.Text
  saleDetails    SaleDetail[] // Relation to SaleDetail model
  rentDetails    RentDetail[] // Relation to RentDetail model
  features       Feature[] // Relation to Feature model
  installments   Installment[] // Relation to Installment model
  images         PropertyImage[] // Relation to PropertyImage model
  isAvailable    Boolean         @default(false)
  completionDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyImage {
  id         String   @id @default(uuid())
  url        String   @db.Text
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model Category {
  id    String @id @default(uuid())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feature {
  id         String   @id @default(uuid())
  title      String
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model Installment {
  id         String   @id @default(uuid())
  title      String
  percentage Int
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model SaleDetail {
  id            String      @id @default(uuid())
  propertyId    String // Foreign Key to Property model
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  title         String
  type          String
  unitNo        String
  floor         Int
  views         View[] // Relation to View model
  area          Decimal
  rPSqft        Decimal
  totalPrice    Decimal
  bedroomCount  Int
  bathroomCount Int
  parkingCount  Int
  images        SaleImage[] // Relation to SaleImage model

  favSales LikedSales[] // Relation to LikedSales model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model SaleImage {
  id     String     @id @default(uuid())
  url    String     @db.Text
  saleId String // Foreign Key to SalesDetail model
  sale   SaleDetail @relation(fields: [saleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saleId])
}

model RentDetail {
  id            String      @id @default(uuid())
  propertyId    String // Foreign Key to Property model
  property      Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  title         String
  type          String
  unitNo        String
  floor         Int
  views         View[] // Relation to View model
  area          Decimal
  rentPrice     Decimal
  bedroomCount  Int
  bathroomCount Int
  parkingCount  Int
  images        RentImage[] // Relation to RentImage model

  favRents LikedRents[] // Relation to LikedRents model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model RentImage {
  id     String     @id @default(uuid())
  url    String     @db.Text
  rentId String // Foreign Key to RentDetail model
  rent   RentDetail @relation(fields: [rentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rentId])
}

model View {
  id     String     @id @default(uuid())
  title  String
  saleId String // Foreign Key to SalesDetail model
  sale   SaleDetail @relation(fields: [saleId], references: [id], onDelete: Cascade)
  rentId String // Foreign Key to RentDetail model
  rent   RentDetail @relation(fields: [rentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saleId])
  @@index([rentId])
}

model Type {
  id    String @id @default(uuid())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String         @id @default(uuid())
  title       String
  description String         @db.Text
  body        String         @db.Text
  images      ArticleImage[] // Relation to ArticleImage model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String  @db.Text
  articleId String // Foreign Key to Article model
  property  Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}

model Agent {
  id       String  @id @default(uuid())
  name     String  @unique
  imageUrl String? @default("https://sketchub.in/storage/project_files/23247/7520688.png")
  email    String? @default("https://mail.google.com")
  linkedin String? @default("https://www.linkedin.com")
  whatsapp String? @default("https://api.whatsapp.com/send/?phone=")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
