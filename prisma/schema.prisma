// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Admin {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  imageUrl String @default("https://cdn-icons-png.flaticon.com/512/3135/3135715.png")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  imageUrl String @default("https://cdn-icons-png.flaticon.com/512/3135/3135715.png")

  favSales FavSale[] // Relation to FavSale model
  favRents FavRent[] // Relation to FavRent model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Intermediary for a many-to-many relationship
model FavSale {
  id       String   @id @default(uuid())
  userId   String // Foreign Key to User model
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  saleId   String // Foreign Key to SaleUnit model
  saleUnit SaleUnit @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([saleId])
}

model FavRent {
  id       String   @id @default(uuid())
  userId   String // Foreign Key to User
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentId   String // Foreign Key to RentUnit model
  rentUnit RentUnit @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rentId])
}

model Agent {
  id       String @id @default(uuid())
  name     String @unique
  imageUrl String @default("https://img.freepik.com/premium-photo/young-hipster-man-black-suit-black-beard-sunglasses-modal-pose_862994-21465.jpg?w=360")
  phone    String @default("")
  email    String @default("")
  whatsapp String @default("")

  properties Property[] // Relation to Property model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id             String   @id @default(uuid())
  title          String   @unique
  owner          String
  city           String
  country        String
  location       String
  category       String
  mapUrl         String
  offPlan        Boolean  @default(false)
  completionDate String?
  description    String?  @db.Text
  amenities      String[]

  installments Installment[] // Relation to Installment model
  images       PropertyImage[] // Relation to PropertyImage model

  agentId String // Foreign Key to Agent model
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agentId])
}

model PropertyImage {
  id         String   @id @default(uuid())
  url        String   @db.Text
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
}

model Category {
  id    String @id @default(uuid())
  title String @unique
}

model Installment {
  id         String   @id @default(uuid())
  title      String
  percentage Decimal
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model SaleUnit {
  id           String   @id @default(uuid())
  title        String   @unique
  owner        String
  city         String
  country      String
  location     String
  type         String
  unitNo       String
  floor        String
  area         Decimal
  rPSqft       Decimal
  totalPrice   Decimal
  bedrooms     Int
  bathrooms    Int
  parkingCount Int
  pdfUrl       String?
  bluePrint    String?
  description  String   @db.Text
  amenities    String[]

  views  SaleView[] // Relation to SaleView model
  images SaleImage[] // Relation to SaleImage model

  favSales FavSale[] // Relation to FavSale model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SaleView {
  id     String   @id @default(uuid())
  title  String
  saleId String // Foreign Key to SalesDetail model
  sale   SaleUnit @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
}

model SaleImage {
  id     String   @id @default(uuid())
  url    String   @db.Text
  saleId String // Foreign Key to SalesDetail model
  sale   SaleUnit @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@index([saleId])
}

model RentUnit {
  id           String   @id @default(uuid())
  title        String   @unique
  owner        String
  city         String
  country      String
  location     String
  type         String
  unitNo       String
  floor        String
  area         Decimal
  totalPrice   Decimal
  bedrooms     Int
  bathrooms    Int
  parkingCount Int
  pdfUrl       String?
  bluePrint    String?
  description  String   @db.Text
  amenities    String[]

  views  RentView[] // Relation to RentView model
  images RentImage[] // Relation to RentImage model

  favRents FavRent[] // Relation to FavRent model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RentImage {
  id     String   @id @default(uuid())
  url    String   @db.Text
  rentId String // Foreign Key to RentUnit model
  rent   RentUnit @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@index([rentId])
}

model RentView {
  id     String   @id @default(uuid())
  title  String
  rentId String // Foreign Key to RentUnit model
  rent   RentUnit @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@index([rentId])
}

model Type {
  id    String @id @default(uuid())
  title String @unique
}

model Amenity {
  id    String @id @default(uuid())
  title String
}

model Article {
  id          String         @id @default(uuid())
  title       String         @unique
  description String         @db.Text
  body        String         @db.Text
  images      ArticleImage[] // Relation to ArticleImage model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String  @db.Text
  articleId String // Foreign Key to Article model
  property  Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}
