// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  email    String  @unique
  //  password String
  isAdmin  Boolean @default(false)
  imageUrl String  @default("https://cdn-icons-png.flaticon.com/512/3135/3135715.png")

  favSales FavSale[] // Relation to FavSale model
  favRents FavRent[] // Relation to FavRent model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Intermediary for a many-to-many relationship
model FavSale {
  id      String   @id @default(uuid())
  userId  String // Foreign Key to User model
  user    User     @relation(fields: [userId], references: [id])
  saleId  String // Foreign Key to SaleUnit model
  favSale SaleUnit @relation(fields: [saleId], references: [id])

  @@index([userId])
  @@index([saleId])
}

model FavRent {
  id      String   @id @default(uuid())
  userId  String // Foreign Key to User
  user    User     @relation(fields: [userId], references: [id])
  rentId  String // Foreign Key to RentUnit model
  favRent RentUnit @relation(fields: [rentId], references: [id])

  @@index([userId])
  @@index([rentId])
}

model Property {
  id             String          @id @default(uuid())
  title          String          @unique
  developer      String
  city           String
  country        String
  location       String
  category       String
  latitude       String
  longitude      String
  offPlan        Boolean         @default(false)
  completionDate String?
  pdfUrl         String?
  description    String          @db.Text
  saleUnits      SaleUnit[] // Relation to SaleUnit model
  rentUnits      RentUnit[] // Relation to RentUnit model
  amenities      Amenity[] // Relation to Feature model
  installments   Installment[] // Relation to Installment model
  images         PropertyImage[] // Relation to PropertyImage model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PropertyImage {
  id         String   @id @default(uuid())
  url        String   @db.Text
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model Category {
  id    String @id @default(uuid())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Amenity {
  id         String   @id @default(uuid())
  title      String
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model Installment {
  id         String   @id @default(uuid())
  title      String
  percentage Int
  propertyId String // Foreign Key to Property model
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model SaleUnit {
  id           String      @id @default(uuid())
  title        String      @unique
  type         String
  unitNo       String
  floor        String
  area         Decimal
  rPSqft       Decimal
  totalPrice   Decimal
  bedrooms     Int
  bathrooms    Int
  parkingCount Int
  description  String      @db.Text
  propertyId   String // Foreign Key to Property model
  property     Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  views        View[] // Relation to View model
  images       SaleImage[] // Relation to SaleImage model

  favSales FavSale[] // Relation to FavSale model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model SaleImage {
  id     String   @id @default(uuid())
  url    String   @db.Text
  saleId String // Foreign Key to SalesDetail model
  sale   SaleUnit @relation(fields: [saleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saleId])
}

model RentUnit {
  id           String      @id @default(uuid())
  title        String      @unique
  type         String
  unitNo       String
  floor        String
  area         Decimal
  rentPrice    Decimal
  bedrooms     Int
  bathrooms    Int
  parkingCount Int
  description  String      @db.Text
  propertyId   String // Foreign Key to Property model
  property     Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  views        View[] // Relation to View model
  images       RentImage[] // Relation to RentImage model

  favRents FavRent[] // Relation to FavRent model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}

model RentImage {
  id     String   @id @default(uuid())
  url    String   @db.Text
  rentId String // Foreign Key to RentUnit model
  rent   RentUnit @relation(fields: [rentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rentId])
}

model View {
  id     String   @id @default(uuid())
  title  String
  saleId String // Foreign Key to SalesDetail model
  sale   SaleUnit @relation(fields: [saleId], references: [id], onDelete: Cascade)
  rentId String // Foreign Key to RentUnit model
  rent   RentUnit @relation(fields: [rentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saleId])
  @@index([rentId])
}

model Type {
  id    String @id @default(uuid())
  title String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String         @id @default(uuid())
  title       String         @unique
  description String         @db.Text
  body        String         @db.Text
  images      ArticleImage[] // Relation to ArticleImage model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleImage {
  id        String  @id @default(uuid())
  url       String  @db.Text
  articleId String // Foreign Key to Article model
  property  Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([articleId])
}

model Agent {
  id       String @id @default(uuid())
  name     String @unique
  imageUrl String @default("https://sketchub.in/storage/project_files/23247/7520688.png")
  phone    String @default("tel:00971")
  email    String @default("https://mail.google.com")
  whatsapp String @default("https://api.whatsapp.com/send/?phone=")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
